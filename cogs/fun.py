from discord.ext import commands
from discord import app_commands
import asyncio
import random
import time
from helpers import bad_apple_helper as ba, fun_helper as fun, reddit_helper as reddit
import discord

class HelpSelect(discord.ui.Select):
    def __init__(self, bot):
        options = [
            discord.SelectOption(label="Buzzle", emoji="üÖ±Ô∏è", description="buzzle commands"),
            discord.SelectOption(label="Misc", emoji="üé≤", description="miscellaneous commands"),
            discord.SelectOption(label="Music", emoji="üéµ", description="music commands")
        ]
        super().__init__(placeholder="Choose a category", max_values=1, min_values=1, options=options)
        self.bot = bot

    async def callback(self, interaction: discord.Interaction):
        emoji = {"Buzzle": "üÖ±", "Misc": "üé≤", "Music": "üéµ"}
        category = self.values[0]
        help_embed = discord.Embed(title=f"{emoji[category]} {category} Commands", colour=0xc566ed)

        for x in self.bot.get_cog(self.values[0]).get_app_commands():
            help_embed.add_field(name=x.name, value=x.description)
        await interaction.response.edit_message(embed=help_embed)


class HelpView(discord.ui.View):
    def __init__(self, *, bot, timeout=180):
        super().__init__(timeout=timeout)
        self.add_item(HelpSelect(bot))
class FunCog(commands.Cog, name='Misc'):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="stonks", description='Check stonks price')
    async def stonks(self, interaction: discord.Interaction, ticker: str):
        await interaction.response.send_message(await fun.stonks(ticker))

    @commands.command(brief='fumofumo', description='fumofumo')
    async def fumo(self, ctx):
        await ctx.send("·óúÀ¨·óú")

    @commands.command(brief='r u da imposter?')
    async def sus(self, ctx):
        randomNum = random.random()
        susText = ['''    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£†‚£§‚£¥‚£∂‚£∂‚£∂‚£∂‚£§‚°Ä‚†à‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚¢∫‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†õ‚†õ‚†ª‚£ø‚°Ñ‚†Ñ‚£æ‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Å :eye: ‚†Ñ‚¢π‚£ø‚°ó‚†Ñ :eye: ‚¢Ñ‚°Ä‚£æ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†ò‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚°Ä‚†Ñ‚£ø‚£ø‚£∑‚£§‚£§‚£æ‚£ø‚£ø‚£ø‚£ß‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚£∞‚£ø‚°ø‚†ü‚†É‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚°õ‚†ø‚¢ø‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†à‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ª‚†ø‚¢õ‚£ø‚£ø‚†ø‚†Ç‚†Ñ‚¢π‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ê‚†ê‚†Ñ‚†Ñ‚£†‚£Ä‚£Ä‚£ö‚£Ø‚£µ‚£∂‚†Ü‚£∞‚†Ñ‚†û‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ñ‚†Ñ‚†à‚†õ‚†ø‚†ø‚†ø‚£ª‚°è‚¢†‚£ø‚£é‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚£õ‚£ø‚£ø‚£µ‚£ø‚°ø‚¢π‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø''', '‡∂û', '''‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ‚£†‚£§‚£§‚£§‚£§‚£§‚£∂‚£¶‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†õ‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†ª‚¢ø‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†à‚¢ª‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚°è‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£æ‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£Ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£∑‚°Ñ‚†Ä
    ‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£∂‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£∑‚†Ä
    ‚†Ä‚¢∞‚£ø‚°ü‚†ã‚†â‚£π‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚†Ä
    ‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä
    ‚†Ä‚£∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†õ‚¢ª‚£ø‚°á‚†Ä‚†Ä
    ‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ß‚†Ä‚†Ä
    ‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä
    ‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä
    ‚†Ä‚¢ø‚£ø‚°Ü‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä
    ‚†Ä‚†∏‚£ø‚£ß‚°Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†É‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚†∂‚†Ä‚¢†‚£ø‚£ø‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚£Ω‚£ø‚°è‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚¢π‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†á‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£¶‚£Ñ‚£Ä‚£†‚£¥‚£ø‚£ø‚†Å‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†ã‚†Å‚†Ä''',
        '''‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£§‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚†ü‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†ô‚†ª‚¢∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°ü‚†Ä‚£†‚£∂‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†≥‚£¶‚°Ä‚†Ä‚†ò‚£ø‚°Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†Å‚†Ä‚¢π‚£ø‚£¶‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£†‚£º‚°á‚†Ä‚†Ä‚†∏‚£∑‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°è‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ø‚†ø‚†ø‚†ø‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°Ñ‚£†
‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚¢†‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°á‚†Ä
‚†ø‚†ø‚†ü‚†õ‚†õ‚†â‚†Ä‚†Ä‚£∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°∂‚†∂‚†ø‚†ø‚†ø‚†ø‚¢∑‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚†Ä‚£∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚£†‚°ø‚†õ‚†õ‚†õ‚†õ‚†ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚¢ª‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚°ü‚†Ä‚†Ä‚¢Ä‚£§‚£§‚£¥‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä
‚†à‚†ô‚¢∑‚£∂‚£¶‚£§‚£§‚£§‚£¥‚£∂‚£æ‚†ø‚†õ‚†Å‚¢Ä‚£∂‚°ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ü‚†Ä
‚¢∑‚£∂‚£§‚£Ä‚†â‚†â‚†â‚†â‚†â‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£Ü‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚°æ‚†É‚†Ä
‚†Ä‚†à‚†â‚†õ‚†ø‚£∂‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ª‚¢ø‚£ø‚£æ‚£ø‚°ø‚†ø‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä''']
        if randomNum < 0.1:
            await ctx.send('Amogus\n' + susText[3])
        elif randomNum < 0.3:
            await ctx.send('Sussus Amogus!\n' + susText[0])
        elif randomNum < 0.65:
            await ctx.send('not sus\n' + susText[1])
        else:
            await ctx.send('not sus?\n' + susText[2])

    @app_commands.command(name='2hujerk', description='Random meme from r/2hujerk')
    async def touhoujerk(self, interaction: discord.Interaction):
        await interaction.response.defer()
        if interaction.channel.is_nsfw():
            nsfw = True
        else:
            nsfw = False
        reddit_link = await reddit.reddit("2hujerk", nsfw)
        await asyncio.sleep(5)
        await interaction.followup.send(reddit_link)


    @app_commands.command(name='reddit', description='Search a random top 10 hot post from a subreddit')
    async def reddit(self, interaction: discord.Interaction, subreddit: str):
        await interaction.response.defer()
        if interaction.channel.is_nsfw():
            nsfw = True
        else:
            nsfw = False
        reddit_link = f'Searching r/{subreddit}\n' + await reddit.reddit(subreddit, nsfw)

        await asyncio.sleep(5)
        await interaction.followup.send(reddit_link)

    @commands.command(hidden=True)
    async def testemoji(self, ctx):
        emoji = '<a:rumiadance:831782682329088000>'
        await ctx.message.add_reaction(emoji)
        await ctx.send(emoji)

    @commands.command(brief="SAD! apple. Spam warning! 1fps lol fuk rate limit")
    async def badapple(self, ctx):
        frames = []
        await ctx.send("‚òØThe girls are now preparing. Please wait warmly.‚òØ")
        for i in range(0, int(6571/30)):
            path = "./frames/BA" + str(i*30) + ".jpg"
            frames.append(ba.runner(path))
        i = 0
        while i < len(frames) - 1:
            await ctx.send(frames[i])
            i += 1
            time.sleep(1)

    @commands.command(brief="Experimental: thedylone can now view webpages as images!")
    async def proxy(self, ctx, arg=None):
        if arg is None:
            await ctx.send("Usage: !proxy <URL>")
        elif fun.proxy(arg) is True:
            await ctx.send(file=discord.File("./data/screenshots/proxy_ss.png"))
        else:
            await ctx.send("That is not a valid url")

    @app_commands.command(name="help")
    async def help_command(self, interactions: discord.Interaction):

        help_embed = discord.Embed(title="Patchouli Help", colour=0xc566ed, description="Choose a category for more info")
        help_embed.add_field(name="üÖ±Ô∏è Buzzle", value="buzzle commands", inline=False)
        help_embed.add_field(name="üé≤ Misc", value="miscellaneous commands", inline=False)
        help_embed.add_field(name="üéµ Music", value="music commands", inline=False)
        await interactions.response.send_message(embed=help_embed, view=HelpView(bot=self.bot))

async def setup(bot):
    await bot.add_cog(FunCog(bot))
